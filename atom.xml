<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jiangdu的博客</title>
  
  <subtitle>jiangdu&#39;s Blog</subtitle>
  <link href="https://github.com/satorimarch/satorimarch.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/satorimarch/satorimarch.github.io/"/>
  <updated>2021-11-27T14:32:14.996Z</updated>
  <id>https://github.com/satorimarch/satorimarch.github.io/</id>
  
  <author>
    <name>jiangdu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C#教程[1] 简介</title>
    <link href="https://github.com/satorimarch/satorimarch.github.io/2021/11/27/C#%E6%95%99%E7%A8%8B[1]%20%E7%AE%80%E4%BB%8B/"/>
    <id>https://github.com/satorimarch/satorimarch.github.io/2021/11/27/C#%E6%95%99%E7%A8%8B[1]%20%E7%AE%80%E4%BB%8B/</id>
    <published>2021-11-27T14:25:05.870Z</published>
    <updated>2021-11-27T14:32:14.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>C#是微软推出的一种基于.NET框架的、面向对象的高级编程语言。C#是一种由C和C++派生出来的面向对象的编程语言。它在继承C和C++强大功能的同时去掉了一些它们的复杂特性，使其成为C语言家族中的一种高效强大的编程语言。C#以.NET框架类库作为基础，拥有类似Visual Basic的快速开发能力。C#由安德斯·海尔斯伯格主持开发，微软在2000年发布了这种语言，希望借助这种语言来取代Java。<a href="%E6%9D%A5%E8%87%AA%5B%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%5D(https://zh.wikipedia.org/wiki/C%E2%99%AF)">^1</a></p></blockquote><h1 id="第一个C-程序"><a href="#第一个C-程序" class="headerlink" title="第一个C#程序"></a>第一个C#程序</h1><p>大家先来看一个在VS2019里新建C#控制台应用生成的默认程序（代码中的 <code>//</code> 表示单行注释）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp // ConsoleApp为命名空间(namespace)</span><br><span class="line">&#123;</span><br><span class="line">    class Program // Program是一个&quot;类&quot;(class)</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args) // Main方法</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Hello World!&quot;); // 输出语句</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>让我们看一下上面程序的各个部分：<a href="%E6%9D%A5%E8%87%AA%5B%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B%5D(https://www.runoob.com/csharp/csharp-program-structure.html)">^2</a></p><ul><li><p>程序的第一行 <strong>using System;</strong> - <strong>using</strong> 关键字用于在程序中包含 <strong>System</strong> 命名空间。 一个程序一般有多个 <strong>using</strong> 语句。</p></li><li><p>下一行是 <strong>namespace</strong> 声明。一个 <strong>namespace</strong> 里包含了一系列的类。命名空间包含了类 <em>Program</em>。</p></li><li><p>下一行是 <strong>class</strong> 声明。类 <em>Program</em> 包含了程序使用的数据和方法声明。类一般包含多个方法。方法定义了类的行为。在这里，<em>Program</em> 类只有一个 <strong>Main</strong> 方法。</p></li><li><p>下一行定义了 <strong>Main</strong> 方法，是所有 C# 程序的 <strong>入口点</strong>。<strong>Main</strong> 方法说明当执行时 类将做什么动作。</p></li><li><p>Main 方法通过语句<code>Console.WriteLine(&quot;Hello World!&quot;);</code> 指定了它的行为。</p><p><em>WriteLine</em> 是一个定义在 <em>System</em> 命名空间中的 <em>Console</em> 类的一个方法。该语句会在屏幕上显示消息 “Hello World!”。</p></li><li><p>最后一行 <strong><code>Console.ReadKey();</code></strong> 是针对 VS.NET 用户的。这使得程序会等待一个按键的动作，防止程序从 Visual Studio .NET 启动时屏幕会快速运行并关闭。</p></li></ul></blockquote><p>大家可能会觉得，这样比在 <code>python</code> 中输出 <code>&quot;hello world&quot;</code> 要繁琐很多，这样的设计看似没有必要，但实际上在大型的项目里能展现出它的优势<a href="%E8%BF%99%E6%A0%B7%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%98%AF%E5%9F%BA%E4%BA%8E%E4%B8%80%E7%A7%8D%E5%8F%AB%E5%81%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(OOP)%E7%9A%84%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%8CC#%E5%92%8CJava%E9%83%BD%E6%98%AF%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%EF%BC%8Cpyhton%E4%B9%9F%E6%94%AF%E6%8C%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">^3</a></p><p>简单的来说，命名空间包含类，类包含方法。</p><p>大家目前只需要注意一下 <code>Program</code> 类和 <code>Main</code> 方法。<br>在 <code>C#</code> 中方法的概念与其他语言中函数的意思区别不大，大家可以理解成函数。<br>而类的真正概念我们会在以后再讲。</p><p> <code>Main</code> 方法被包含在 <code>Program</code> 类中，而我们的程序总会从 <code>Main</code> 方法开始执行。</p><p> 在语句 <code>Console.WriteLine(&quot;Hello World!&quot;);</code> 中, <code>Console</code>也是一个类，而 <code>WriteLine()</code> 则为 <code>Console</code> 类中的一个方法，中间的 <code>.</code> 表示访问 <code>Console</code> 类中的成员<a href="%E5%85%B6%E5%AD%A6%E5%90%8D%E4%B8%BA%E6%88%90%E5%91%98%E8%AE%BF%E9%97%AE%E8%BF%90%E7%AE%97%E7%AC%A6">^4</a>，此处访问的即为该类中的<code>WriteLine()</code> 方法。</p><p>大家可以注意到一个有意思的现象，我们的 <code>Main</code> 方法也是被包含在一个类中的。事实上，在 <code>C#</code> 中方法的声明一定在一个类的内部。</p><p>因为我们目前只看主函数部分，所以以后会将上面那段代码写成如下的形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">Console.WriteLine(&quot;Hello World!&quot;); // 输出语句</span><br></pre></td></tr></table></figure><p>事实上，这样类似 <code>python</code> 的代码是 <code>.net5.0</code> 中的新特性：顶级语句。这样的程序在 <code>.net5.0运行时</code> 是可以通过编译并正常运行的。</p><hr><p>本文作者: jiangdu</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;C#是微软推出的一种基于.NET框架的、面向对象的高级编程语言。C#是一种由C和C++派生出来的面向对象的编程语言</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>电子电路社纳新</title>
    <link href="https://github.com/satorimarch/satorimarch.github.io/2021/11/27/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E7%A4%BE%E7%BA%B3%E6%96%B0/"/>
    <id>https://github.com/satorimarch/satorimarch.github.io/2021/11/27/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E7%A4%BE%E7%BA%B3%E6%96%B0/</id>
    <published>2021-11-27T14:25:05.855Z</published>
    <updated>2021-11-27T14:31:42.168Z</updated>
    
    <content type="html"><![CDATA[<p>周二下午没事做？<br>不如来 电子电路社 <code>敲 代 码</code> ！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">Console.WriteLine(&quot;快来电子电路社!\n&quot;);</span><br></pre></td></tr></table></figure><p>我和我身边的朋友都在做，<br><del>每天收入0元</del></p><p>虽然受不可抗力因素影响（？），<br>社团里可能<del>既没有电子也没有电路还没有社</del>，<br>但我们<del>温柔贤惠</del>的社长将会带领大家一起学习 <code>C#</code> ,<code>python</code> 等热门编程语言，<br>走入信息世界的大门。</p><p>不管您是对编程充满好奇的萌新，<br><del>还是随手AK IOI的大佬</del>，<br>电子电路社都欢迎您的到来。<br>每周二下午4点，<br><del>是兄弟就来找我（？）</del> <a href="%E6%96%87%E6%A1%88%E4%BD%9C%E8%80%85%E4%B8%BA%E5%89%AF%E7%A4%BE%E9%95%BFzzm">^1</a></p><h2 id="翻译：社团要没人了，救救孩子！（"><a href="#翻译：社团要没人了，救救孩子！（" class="headerlink" title="翻译：社团要没人了，救救孩子！（"></a>翻译：社团要没人了，救救孩子！（</h2><h4 id="报名方式："><a href="#报名方式：" class="headerlink" title="报名方式："></a>报名方式：</h4><p><a href="https://www.wjx.top/vm/OYzPatv.aspx">报名链接</a>（选开发部电子电路社）</p><p>社团微信群：（如果图片崩了请加QQ群或者社长微信）</p><p><img src="https://s6.jpg.cm/2021/11/20/IM01LC.jpg" alt="微信群"></p><p>QQ群: 942591414</p><p>社长微信号: jdu1234567</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;周二下午没事做？&lt;br&gt;不如来 电子电路社 &lt;code&gt;敲 代 码&lt;/code&gt; ！&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C#教程[3] 数据类型转换</title>
    <link href="https://github.com/satorimarch/satorimarch.github.io/2021/11/27/C#%E6%95%99%E7%A8%8B[3]%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://github.com/satorimarch/satorimarch.github.io/2021/11/27/C#%E6%95%99%E7%A8%8B[3]%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-11-27T14:25:05.851Z</published>
    <updated>2021-11-27T14:32:38.565Z</updated>
    
    <content type="html"><![CDATA[<p>C# 是一门强类型语言，对类型的要求很严格，类型转换的方式有两种：<strong>隐式类型转换</strong>和<strong>显式类型转换</strong>。</p><h1 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 5;</span><br><span class="line">double b = 1.5;</span><br><span class="line">double c = a + b;</span><br><span class="line">System.Console.WriteLine(c);</span><br></pre></td></tr></table></figure><p>像这样，并没有对源代码进行任何特殊处理，而是由编译器自动进行了从<code>int</code>类型到<code>double</code>类型的隐式转换。</p><p>但是很多类型之间不可以进行隐式类型转换，可以看下面的例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">double a = 1.5;</span><br><span class="line">int b = a;</span><br><span class="line">System.Console.WriteLine(b);</span><br></pre></td></tr></table></figure><p>在作者的电脑上编译时会有这样的报错：</p><blockquote><p>错误    CS0266    无法将类型“double”隐式转换为“int”</p></blockquote><p>因此，我们需要用显式类型转换改正它。</p><h1 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h1><p>上面的例子的第二行应改为这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int b = (int)a;</span><br></pre></td></tr></table></figure><p>语法就是在要转换的变量前加一组小括号，里面写要转换成的类型名。所有的隐式类型转换都可以写成显式。</p><p>但是这样写输出的结果却是<code>1</code>而非想象中的四舍五入<code>2</code>。</p><p>用显式类型转换<strong>会丢失数据的精度</strong>，这也是为什么编译器不会自动进行显式类型转换。显式类型转换又叫强制类型转换。</p><p>而且显式类型转换也并非所有类型之间都能转的，例如下面这么写也是<strong>错误</strong>的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">double a = (double)&quot;5.5&quot;;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在许多其他编程语言里，<code>int</code>可以隐式转换为<code>bool</code>，但是C# 中无论是隐式还是显式都会报错，要使用后面提到的<code>Convert.ToBoolean()</code></p><p>为了解决上述的问题，我们将介绍使用方法进行类型转换。</p><h1 id="使用方法进行类型转换"><a href="#使用方法进行类型转换" class="headerlink" title="使用方法进行类型转换"></a>使用方法进行类型转换</h1><h2 id="使用ToString-方法"><a href="#使用ToString-方法" class="headerlink" title="使用ToString()方法"></a>使用<code>ToString()</code>方法</h2><p>所有的类型都可以使用<code>ToString()</code>方法，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a = 5;</span><br><span class="line">string b = a.ToString();</span><br></pre></td></tr></table></figure><h2 id="使用Convert-ToInt32-方法"><a href="#使用Convert-ToInt32-方法" class="headerlink" title="使用Convert.ToInt32()方法"></a>使用<code>Convert.ToInt32()</code>方法</h2><p><code>Convert</code>为类名，<code>ToInt32()</code>为其中的方法名。<code>Convert</code>类提供了许多转换的方法，例如：<code>ToChar()</code>，<code>ToDouble()</code>，<code>ToBoolean()</code></p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a = Convert.ToInt32(&quot;5.0&quot;);</span><br></pre></td></tr></table></figure><h2 id="使用int-Parse-方法"><a href="#使用int-Parse-方法" class="headerlink" title="使用int.Parse()方法"></a>使用<code>int.Parse()</code>方法</h2><p><code>Parse()</code>方法用来将<strong>字符串</strong>转换为其他的类型</p><h3 id="注意：Parse-方法的参数只能是字符串"><a href="#注意：Parse-方法的参数只能是字符串" class="headerlink" title="注意：Parse()方法的参数只能是字符串"></a>注意：<code>Parse()</code>方法的参数只能是字符串</h3><p>使用时 <code>类型名.Parse(需要转换的变量);</code>  即可</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string a = &quot;5&quot;;</span><br><span class="line">int b = int.Parse(a);</span><br></pre></td></tr></table></figure><p>虽然例子中用的是<code>int</code>类型，但实际上所有数字类型都有类似的方法。</p><p>但是将字符串<code>&quot;apple&quot;</code>转换为int时还是会报错导致程序无法继续运行，且我们也并不真的希望他把<code>apple</code>转为<code>int</code>类型，这时我们可以使用<code>TryParse()</code>方法。</p><h2 id="使用-int-TryParse-等方法"><a href="#使用-int-TryParse-等方法" class="headerlink" title="使用 int.TryParse()等方法"></a>使用 <code>int.TryParse()</code>等方法</h2><p>微软官方教程中的说明如下：</p><blockquote><p><code>TryParse()</code> 方法可同时执行多项操作：</p><ol><li><p>它会<strong>尝试</strong>将字符串分析成给定的数字数据类型。</p></li><li><p>如果成功，它会将转换后的值存储在 <strong>out 参数</strong>中。</p></li><li><p>它会<strong>返回布尔值</strong>来指示操作是否成功。</p></li></ol><p>对于<strong>所有数字数据类型</strong>，均可使用类似的 <code>TryParse()</code> 方法。</p></blockquote><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">double result;</span><br><span class="line">string str = &quot;5.5&quot;;</span><br><span class="line">bool a = double.TryParse(str, out result); // result 即为说明中第2条的 &quot;out参数&quot; </span><br><span class="line">System.Console.WriteLine($&quot;a = &#123;a&#125;\nresult = &#123;result&#125;\n&quot;);</span><br></pre></td></tr></table></figure><p>此时，输出结果应为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = True</span><br><span class="line">result = 5.5</span><br></pre></td></tr></table></figure><h2 id="例题：（来自微软官方文档-链接）"><a href="#例题：（来自微软官方文档-链接）" class="headerlink" title="例题：（来自微软官方文档 链接）"></a>例题：（来自微软官方文档 <a href="https://docs.microsoft.com/zh-cn/learn/modules/csharp-convert-cast/4-challenge">链接</a>）</h2><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>已知一个字符串数组<code>values</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string[] values = &#123; &quot;12.3&quot;, &quot;45&quot;, &quot;ABC&quot;, &quot;11&quot;, &quot;DEF&quot; &#125;;</span><br></pre></td></tr></table></figure><p>循环访问字符串数组中的每个值， 对于每个值满足以下规则：</p><p>规则 1：如果值是字母，则连接它以形成消息</p><p>规则 2：如果值是数字，则将其加到总计值</p><h3 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Message: ABCDEF</span><br><span class="line">Total: 68.3</span><br></pre></td></tr></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h3><p>官方:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">string[] values = &#123; &quot;12.3&quot;, &quot;45&quot;, &quot;ABC&quot;, &quot;11&quot;, &quot;DEF&quot; &#125;;</span><br><span class="line"></span><br><span class="line">decimal total = 0m;</span><br><span class="line">string message = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">foreach (var value in values)</span><br><span class="line">&#123;</span><br><span class="line">    decimal number;</span><br><span class="line">    if (decimal.TryParse(value, out number))</span><br><span class="line">    &#123;</span><br><span class="line">        total += number;</span><br><span class="line">    &#125; else</span><br><span class="line">    &#123;</span><br><span class="line">        message += value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.WriteLine($&quot;Message: &#123;message&#125;&quot;);</span><br><span class="line">Console.WriteLine($&quot;Total: &#123;total&#125;&quot;);</span><br></pre></td></tr></table></figure><p>作者的版本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">string[] values = &#123; &quot;12.3&quot;, &quot;45&quot;, &quot;ABC&quot;, &quot;11&quot;, &quot;DEF&quot; &#125;;</span><br><span class="line"></span><br><span class="line">decimal total = 0.0m;</span><br><span class="line">string message = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">foreach (string v in values)</span><br><span class="line">&#123;</span><br><span class="line">    if (decimal.TryParse(v, out decimal curr)) total += curr; // 这样写curr变量只会在if语句的范围内生效</span><br><span class="line">    else message += v; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.WriteLine($&quot;Messagae: &#123;message&#125;\nTotal: &#123;total&#125;\n&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="其他注意事项："><a href="#其他注意事项：" class="headerlink" title="其他注意事项："></a>其他注意事项：</h2><p>试图将字符串<code>&quot;5.5&quot;</code>转换成<code>int</code>类型时，下面两种方法都是<strong>错误</strong>的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a = Convert.ToInt32(&quot;5.5&quot;);</span><br><span class="line">int a = int.Parse(&quot;5.5&quot;);</span><br></pre></td></tr></table></figure><p>正确的做法应该是先<strong>把字符串<code>&quot;5.5&quot;</code>先转换成<code>double</code>类型，再转换成<code>int</code>类型</strong>，比如下面两种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a = (int)Convert.ToDouble(&quot;5.5&quot;);</span><br><span class="line">int a = (int)Double.Parse(&quot;5.5&quot;);</span><br></pre></td></tr></table></figure><p>作者: jiangdu（另一常用网名: satori_march）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C# 是一门强类型语言，对类型的要求很严格，类型转换的方式有两种：&lt;strong&gt;隐式类型转换&lt;/strong&gt;和&lt;strong&gt;显式类型转换&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;隐式类型转换&quot;&gt;&lt;a href=&quot;#隐式类型转换&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/satorimarch/satorimarch.github.io/2021/11/27/hello-world/"/>
    <id>https://github.com/satorimarch/satorimarch.github.io/2021/11/27/hello-world/</id>
    <published>2021-11-27T13:36:29.795Z</published>
    <updated>2021-11-27T14:29:59.136Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
